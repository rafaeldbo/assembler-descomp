tmp(0) := x"4" & '0' & x"00";	-- LDI $0
tmp(1) := x"5" & '1' & x"20";	-- STA @HEX0
tmp(2) := x"5" & '1' & x"21";	-- STA @HEX1
tmp(3) := x"5" & '1' & x"22";	-- STA @HEX2
tmp(4) := x"5" & '1' & x"23";	-- STA @HEX3
tmp(5) := x"5" & '1' & x"24";	-- STA @HEX4
tmp(6) := x"5" & '1' & x"25";	-- STA @HEX5
tmp(7) := x"5" & '1' & x"00";	-- STA @LEDR0TO7
tmp(8) := x"5" & '1' & x"01";	-- STA @LEDR8
tmp(9) := x"5" & '1' & x"02";	-- STA @LEDR9
tmp(10) := x"5" & '1' & x"FF";	-- STA @KEY0_RESET
tmp(11) := x"5" & '1' & x"FE";	-- STA @KEY1_RESET
tmp(12) := x"4" & '0' & x"00";	-- LDI $0 	# contagem inciada em 0
tmp(13) := x"5" & '0' & x"10";	-- STA @UNIDADES
tmp(14) := x"5" & '0' & x"11";	-- STA @DEZENAS
tmp(15) := x"5" & '0' & x"12";	-- STA @CENTENAS
tmp(16) := x"5" & '0' & x"13";	-- STA @UNI_MILHARES
tmp(17) := x"5" & '0' & x"14";	-- STA @DEZ_MILHARES
tmp(18) := x"5" & '0' & x"15";	-- STA @CEN_MILHARES
tmp(19) := x"4" & '0' & x"09";	-- LDI $9 	# Limite de contagem inicial de 999.999
tmp(20) := x"5" & '0' & x"16";	-- STA @LIM_UNIDADES
tmp(21) := x"5" & '0' & x"17";	-- STA @LIM_DEZENAS
tmp(22) := x"5" & '0' & x"18";	-- STA @LIM_CENTENAS
tmp(23) := x"5" & '0' & x"19";	-- STA @LIM_UNI_MILHARES
tmp(24) := x"5" & '0' & x"1A";	-- STA @LIM_DEZ_MILHARES
tmp(25) := x"5" & '0' & x"1B";	-- STA @LIM_CEN_MILHARES
tmp(26) := x"4" & '0' & x"00";	-- LDI $0
tmp(27) := x"5" & '0' & x"00";	-- STA @0
tmp(28) := x"4" & '0' & x"01";	-- LDI $1
tmp(29) := x"5" & '0' & x"01";	-- STA @1
tmp(30) := x"4" & '0' & x"0A";	-- LDI $10
tmp(31) := x"5" & '0' & x"0A";	-- STA @10
tmp(32) := x"1" & '1' & x"64";	-- LDA @FPGA_RESET 	# verifica FPGA_RESET
tmp(33) := x"B" & '0' & x"01";	-- AND @1
tmp(34) := x"8" & '0' & x"01";	-- CEQ @1 	# Não tem debouncing no FPGA_RESET, então o botão é 0 quando apertado
tmp(35) := x"7" & '0' & x"25";	-- JEQ @notRestart 	# Só reinicia a contagem se o FPGA_RESET for pressionado
tmp(36) := x"9" & '0' & x"90";	-- JSR @restart
tmp(37) := x"1" & '1' & x"61";	-- LDA @KEY1 	# verifica KEY1
tmp(38) := x"B" & '0' & x"01";	-- AND @1
tmp(39) := x"8" & '0' & x"00";	-- CEQ @0
tmp(40) := x"7" & '0' & x"2A";	-- JEQ @notConfig 	# Só muda pro modo de configuração de limite se o KEY1 for pressionado
tmp(41) := x"9" & '0' & x"3B";	-- JSR @config
tmp(42) := x"1" & '1' & x"60";	-- LDA @KEY0 	# verifica KEY0
tmp(43) := x"B" & '0' & x"01";	-- AND @1
tmp(44) := x"8" & '0' & x"00";	-- CEQ @0
tmp(45) := x"7" & '0' & x"2F";	-- JEQ @notInc 	# Só incrementa de limite se o KEY0 for pressionado
tmp(46) := x"9" & '0' & x"31";	-- JSR @inc
tmp(47) := x"9" & '0' & x"E0";	-- JSR @updateHexas 	# exibe contagem atualizada
tmp(48) := x"6" & '0' & x"20";	-- JMP @loop 	# fim do loop principal
tmp(49) := x"5" & '1' & x"FF";	-- STA @KEY0_RESET 	# limpa botão de incrementar
tmp(50) := x"1" & '0' & x"20";	-- LDA @INC_DISABLE
tmp(51) := x"8" & '0' & x"01";	-- CEQ @1 	# verifica flag de limite de contagem / overflow (inibe incremento)
tmp(52) := x"7" & '0' & x"3A";	-- JEQ @endInc 	# se flag hablitada, não incrementa (pula pro final da função)
tmp(53) := x"1" & '0' & x"10";	-- LDA @UNIDADES
tmp(54) := x"2" & '0' & x"01";	-- ADD @1 	# incrementa
tmp(55) := x"5" & '0' & x"10";	-- STA @UNIDADES
tmp(56) := x"9" & '0' & x"9E";	-- JSR @update 	# atualiza valores para ficarem decimais
tmp(57) := x"9" & '0' & x"CA";	-- JSR @checkLimit 	# checa se limite de contagem foi atingido
tmp(58) := x"A" & '0' & x"00";	-- RET
tmp(59) := x"5" & '1' & x"FE";	-- STA @KEY1_RESET 	# limpa botão de configurar limites
tmp(60) := x"9" & '0' & x"90";	-- JSR @restart 	# reseta contagem
tmp(61) := x"4" & '0' & x"01";	-- LDI $1 	# indica que está setando limite da unidade (1 led acesos)
tmp(62) := x"5" & '1' & x"00";	-- STA @LEDR0TO7
tmp(63) := x"1" & '1' & x"61";	-- LDA @KEY1
tmp(64) := x"B" & '0' & x"01";	-- AND @1
tmp(65) := x"8" & '0' & x"00";	-- CEQ @0 	# verifica se o botão de configurar foi apertado
tmp(66) := x"1" & '1' & x"40";	-- LDA @SW0TO7
tmp(67) := x"5" & '1' & x"20";	-- STA @HEX0 	# exibe valor das chaves
tmp(68) := x"7" & '0' & x"3F";	-- JEQ @configUnidades
tmp(69) := x"5" & '1' & x"FE";	-- STA @KEY1_RESET
tmp(70) := x"5" & '0' & x"16";	-- STA @LIM_UNIDADES
tmp(71) := x"4" & '0' & x"09";	-- LDI $9
tmp(72) := x"C" & '0' & x"16";	-- CLT @LIM_UNIDADES 	# verifica se o limite é válido
tmp(73) := x"D" & '0' & x"3F";	-- JLT @configUnidades
tmp(74) := x"4" & '0' & x"03";	-- LDI $3 	# indica que está setando limite da dezena (2 leds acesos)
tmp(75) := x"5" & '1' & x"00";	-- STA @LEDR0TO7
tmp(76) := x"1" & '1' & x"61";	-- LDA @KEY1
tmp(77) := x"B" & '0' & x"01";	-- AND @1
tmp(78) := x"8" & '0' & x"00";	-- CEQ @0 	# verifica se o botão de configurar foi apertado
tmp(79) := x"1" & '1' & x"40";	-- LDA @SW0TO7
tmp(80) := x"5" & '1' & x"21";	-- STA @HEX1 	# exibe valor das chaves
tmp(81) := x"7" & '0' & x"4C";	-- JEQ @configDezenas
tmp(82) := x"5" & '1' & x"FE";	-- STA @KEY1_RESET
tmp(83) := x"5" & '0' & x"17";	-- STA @LIM_DEZENAS
tmp(84) := x"4" & '0' & x"09";	-- LDI $9
tmp(85) := x"C" & '0' & x"17";	-- CLT @LIM_DEZENAS 	# verifica se o limite é válido
tmp(86) := x"D" & '0' & x"4C";	-- JLT @configDezenas
tmp(87) := x"4" & '0' & x"07";	-- LDI $7 	# indica que está setando limite da centena (3 leds acesos)
tmp(88) := x"5" & '1' & x"00";	-- STA @LEDR0TO7
tmp(89) := x"1" & '1' & x"61";	-- LDA @KEY1
tmp(90) := x"B" & '0' & x"01";	-- AND @1
tmp(91) := x"8" & '0' & x"00";	-- CEQ @0 	# verifica se o botão de configurar foi apertado
tmp(92) := x"1" & '1' & x"40";	-- LDA @SW0TO7
tmp(93) := x"5" & '1' & x"22";	-- STA @HEX2 	# exibe valor das chaves
tmp(94) := x"7" & '0' & x"59";	-- JEQ @configCentenas
tmp(95) := x"5" & '1' & x"FE";	-- STA @KEY1_RESET
tmp(96) := x"5" & '0' & x"18";	-- STA @LIM_CENTENAS
tmp(97) := x"4" & '0' & x"09";	-- LDI $9
tmp(98) := x"C" & '0' & x"18";	-- CLT @LIM_CENTENAS 	# verifica se o limite é válido
tmp(99) := x"D" & '0' & x"59";	-- JLT @configCentenas
tmp(100) := x"4" & '0' & x"0F";	-- LDI $15 	# indica que está setando limite da unidade de milhar (4 leds acesos)
tmp(101) := x"5" & '1' & x"00";	-- STA @LEDR0TO7
tmp(102) := x"1" & '1' & x"61";	-- LDA @KEY1
tmp(103) := x"B" & '0' & x"01";	-- AND @1
tmp(104) := x"8" & '0' & x"00";	-- CEQ @0 	# verifica se o botão de configurar foi apertado
tmp(105) := x"1" & '1' & x"40";	-- LDA @SW0TO7
tmp(106) := x"5" & '1' & x"23";	-- STA @HEX3 	# exibe valor das chaves
tmp(107) := x"7" & '0' & x"66";	-- JEQ @configUniMilhares
tmp(108) := x"5" & '1' & x"FE";	-- STA @KEY1_RESET
tmp(109) := x"5" & '0' & x"19";	-- STA @LIM_UNI_MILHARES
tmp(110) := x"4" & '0' & x"09";	-- LDI $9
tmp(111) := x"C" & '0' & x"19";	-- CLT @LIM_UNI_MILHARES 	# verifica se o limite é válido
tmp(112) := x"D" & '0' & x"66";	-- JLT @configUniMilhares
tmp(113) := x"4" & '0' & x"1F";	-- LDI $31 	# indica que está setando limite da dezena de milhar (5 leds acesos)
tmp(114) := x"5" & '1' & x"00";	-- STA @LEDR0TO7
tmp(115) := x"1" & '1' & x"61";	-- LDA @KEY1
tmp(116) := x"B" & '0' & x"01";	-- AND @1
tmp(117) := x"8" & '0' & x"00";	-- CEQ @0 	# verifica se o botão de configurar foi apertado
tmp(118) := x"1" & '1' & x"40";	-- LDA @SW0TO7
tmp(119) := x"5" & '1' & x"24";	-- STA @HEX4 	# exibe valor das chaves
tmp(120) := x"7" & '0' & x"73";	-- JEQ @configDezMilhares
tmp(121) := x"5" & '1' & x"FE";	-- STA @KEY1_RESET
tmp(122) := x"5" & '0' & x"1A";	-- STA @LIM_DEZ_MILHARES
tmp(123) := x"4" & '0' & x"09";	-- LDI $9
tmp(124) := x"C" & '0' & x"1A";	-- CLT @LIM_DEZ_MILHARES 	# verifica se o limite é válido
tmp(125) := x"D" & '0' & x"73";	-- JLT @configDezMilhares
tmp(126) := x"4" & '0' & x"3F";	-- LDI $63 	# indica que está setando limite da centena de milhar (6 leds acesos)
tmp(127) := x"5" & '1' & x"00";	-- STA @LEDR0TO7
tmp(128) := x"1" & '1' & x"61";	-- LDA @KEY1
tmp(129) := x"B" & '0' & x"01";	-- AND @1
tmp(130) := x"8" & '0' & x"00";	-- CEQ @0 	# verifica se o botão de configurar foi apertado
tmp(131) := x"1" & '1' & x"40";	-- LDA @SW0TO7
tmp(132) := x"5" & '1' & x"25";	-- STA @HEX5 	# exibe valor das chaves
tmp(133) := x"7" & '0' & x"80";	-- JEQ @configCenMilhares
tmp(134) := x"5" & '1' & x"FE";	-- STA @KEY1_RESET
tmp(135) := x"5" & '0' & x"1B";	-- STA @LIM_CEN_MILHARES
tmp(136) := x"4" & '0' & x"09";	-- LDI $9
tmp(137) := x"C" & '0' & x"1B";	-- CLT @LIM_CEN_MILHARES 	# verifica se o limite é válido
tmp(138) := x"D" & '0' & x"80";	-- JLT @configCenMilhares
tmp(139) := x"4" & '0' & x"00";	-- LDI $0 	# apaga leds
tmp(140) := x"5" & '1' & x"00";	-- STA @LEDR0TO7
tmp(141) := x"9" & '0' & x"90";	-- JSR @restart 	# reseta valores do display e limpa botões
tmp(142) := x"9" & '0' & x"CA";	-- JSR @checkLimit 	# checa se o limite de contagem foi atingido
tmp(143) := x"A" & '0' & x"00";	-- RET
tmp(144) := x"4" & '0' & x"00";	-- LDI $0
tmp(145) := x"5" & '1' & x"FF";	-- STA @KEY0_RESET
tmp(146) := x"5" & '1' & x"FE";	-- STA @KEY1_RESET
tmp(147) := x"5" & '0' & x"20";	-- STA @INC_DISABLE 	# Limpa flag que inibe incremento
tmp(148) := x"5" & '1' & x"01";	-- STA @LEDR8 	# Limpa aviso de overflow
tmp(149) := x"5" & '1' & x"02";	-- STA @LEDR9 	# Limpa aviso de limite de contagem
tmp(150) := x"5" & '0' & x"10";	-- STA @UNIDADES
tmp(151) := x"5" & '0' & x"11";	-- STA @DEZENAS
tmp(152) := x"5" & '0' & x"12";	-- STA @CENTENAS
tmp(153) := x"5" & '0' & x"13";	-- STA @UNI_MILHARES
tmp(154) := x"5" & '0' & x"14";	-- STA @DEZ_MILHARES
tmp(155) := x"5" & '0' & x"15";	-- STA @CEN_MILHARES
tmp(156) := x"9" & '0' & x"E0";	-- JSR @updateHexas 	# Atualiza displays
tmp(157) := x"A" & '0' & x"00";	-- RET
tmp(158) := x"1" & '0' & x"10";	-- LDA @UNIDADES
tmp(159) := x"C" & '0' & x"0A";	-- CLT @10 	# Verifica se precisa dar "carry out" na unidade
tmp(160) := x"D" & '0' & x"C9";	-- JLT @endUpdate
tmp(161) := x"4" & '0' & x"00";	-- LDI $0
tmp(162) := x"5" & '0' & x"10";	-- STA @UNIDADES
tmp(163) := x"1" & '0' & x"11";	-- LDA @DEZENAS
tmp(164) := x"2" & '0' & x"01";	-- ADD @1
tmp(165) := x"5" & '0' & x"11";	-- STA @DEZENAS
tmp(166) := x"C" & '0' & x"0A";	-- CLT @10 	# Verifica se precisa dar "carry out" na dezena
tmp(167) := x"D" & '0' & x"C9";	-- JLT @endUpdate
tmp(168) := x"4" & '0' & x"00";	-- LDI $0
tmp(169) := x"5" & '0' & x"11";	-- STA @DEZENAS
tmp(170) := x"1" & '0' & x"12";	-- LDA @CENTENAS
tmp(171) := x"2" & '0' & x"01";	-- ADD @1
tmp(172) := x"5" & '0' & x"12";	-- STA @CENTENAS
tmp(173) := x"C" & '0' & x"0A";	-- CLT @10 	# Verifica se precisa dar "carry out" na centena
tmp(174) := x"D" & '0' & x"C9";	-- JLT @endUpdate
tmp(175) := x"4" & '0' & x"00";	-- LDI $0
tmp(176) := x"5" & '0' & x"12";	-- STA @CENTENAS
tmp(177) := x"1" & '0' & x"13";	-- LDA @UNI_MILHARES
tmp(178) := x"2" & '0' & x"01";	-- ADD @1
tmp(179) := x"5" & '0' & x"13";	-- STA @UNI_MILHARES
tmp(180) := x"C" & '0' & x"0A";	-- CLT @10 	# Verifica se precisa dar "carry out" na unidade de milhar
tmp(181) := x"D" & '0' & x"C9";	-- JLT @endUpdate
tmp(182) := x"4" & '0' & x"00";	-- LDI $0
tmp(183) := x"5" & '0' & x"13";	-- STA @UNI_MILHARES
tmp(184) := x"1" & '0' & x"14";	-- LDA @DEZ_MILHARES
tmp(185) := x"2" & '0' & x"01";	-- ADD @1
tmp(186) := x"5" & '0' & x"14";	-- STA @DEZ_MILHARES
tmp(187) := x"C" & '0' & x"0A";	-- CLT @10 	# Verifica se precisa dar "carry out" na dezena de milhar
tmp(188) := x"D" & '0' & x"C9";	-- JLT @endUpdate
tmp(189) := x"4" & '0' & x"00";	-- LDI $0
tmp(190) := x"5" & '0' & x"14";	-- STA @DEZ_MILHARES
tmp(191) := x"1" & '0' & x"15";	-- LDA @CEN_MILHARES
tmp(192) := x"2" & '0' & x"01";	-- ADD @1
tmp(193) := x"5" & '0' & x"15";	-- STA @CEN_MILHARES
tmp(194) := x"C" & '0' & x"0A";	-- CLT @10 	# Verifica se precisa dar "carry out" na centena de milhar
tmp(195) := x"D" & '0' & x"C9";	-- JLT @endUpdate
tmp(196) := x"4" & '0' & x"00";	-- LDI $0
tmp(197) := x"5" & '0' & x"15";	-- STA @CEN_MILHARES
tmp(198) := x"4" & '0' & x"01";	-- LDI $1
tmp(199) := x"5" & '0' & x"20";	-- STA @INC_DISABLE 	# Seta flag que inibe incremento
tmp(200) := x"5" & '1' & x"01";	-- STA @LEDR8 	# Indica que teve overflow
tmp(201) := x"A" & '0' & x"00";	-- RET
tmp(202) := x"1" & '0' & x"10";	-- LDA @UNIDADES
tmp(203) := x"C" & '0' & x"16";	-- CLT @LIM_UNIDADES 	# Checa limite da unidade
tmp(204) := x"D" & '0' & x"DF";	-- JLT @endCheckLimit 	# Se não chegou no limite, finaliza função
tmp(205) := x"1" & '0' & x"11";	-- LDA @DEZENAS
tmp(206) := x"C" & '0' & x"17";	-- CLT @LIM_DEZENAS 	# Checa limite da dezena
tmp(207) := x"D" & '0' & x"DF";	-- JLT @endCheckLimit 	# Se não chegou no limite, finaliza função
tmp(208) := x"1" & '0' & x"12";	-- LDA @CENTENAS
tmp(209) := x"C" & '0' & x"18";	-- CLT @LIM_CENTENAS 	# Checa limite da centena
tmp(210) := x"D" & '0' & x"DF";	-- JLT @endCheckLimit 	# Se não chegou no limite, finaliza função
tmp(211) := x"1" & '0' & x"13";	-- LDA @UNI_MILHARES
tmp(212) := x"C" & '0' & x"19";	-- CLT @LIM_UNI_MILHARES 	# Checa limite da unidade de milhar
tmp(213) := x"D" & '0' & x"DF";	-- JLT @endCheckLimit 	# Se não chegou no limite, finaliza função
tmp(214) := x"1" & '0' & x"14";	-- LDA @DEZ_MILHARES
tmp(215) := x"C" & '0' & x"1A";	-- CLT @LIM_DEZ_MILHARES 	# Checa limite da dezena de milhar
tmp(216) := x"D" & '0' & x"DF";	-- JLT @endCheckLimit 	# Se não chegou no limite, finaliza função
tmp(217) := x"1" & '0' & x"15";	-- LDA @CEN_MILHARES
tmp(218) := x"C" & '0' & x"1B";	-- CLT @LIM_CEN_MILHARES 	# Checa limite da centena de milhar
tmp(219) := x"D" & '0' & x"DF";	-- JLT @endCheckLimit 	# Se não chegou no limite, finaliza função
tmp(220) := x"4" & '0' & x"01";	-- LDI $1
tmp(221) := x"5" & '0' & x"20";	-- STA @INC_DISABLE 	# Seta flag de limite de contagem
tmp(222) := x"5" & '1' & x"02";	-- STA @LEDR9 	# indica que o limite de contagem foi atingido
tmp(223) := x"A" & '0' & x"00";	-- RET
tmp(224) := x"1" & '0' & x"10";	-- LDA @UNIDADES
tmp(225) := x"5" & '1' & x"20";	-- STA @HEX0 	# exibe valor da unidade
tmp(226) := x"1" & '0' & x"11";	-- LDA @DEZENAS
tmp(227) := x"5" & '1' & x"21";	-- STA @HEX1 	# exibe valor da dezena
tmp(228) := x"1" & '0' & x"12";	-- LDA @CENTENAS
tmp(229) := x"5" & '1' & x"22";	-- STA @HEX2 	# exibe valor da centena
tmp(230) := x"1" & '0' & x"13";	-- LDA @UNI_MILHARES
tmp(231) := x"5" & '1' & x"23";	-- STA @HEX3 	# exibe valor da unidade de milhar
tmp(232) := x"1" & '0' & x"14";	-- LDA @DEZ_MILHARES
tmp(233) := x"5" & '1' & x"24";	-- STA @HEX4 	# exibe valor da dezena de milhar
tmp(234) := x"1" & '0' & x"15";	-- LDA @CEN_MILHARES
tmp(235) := x"5" & '1' & x"25";	-- STA @HEX5 	# exibe valor da centena de milhar
tmp(236) := x"A" & '0' & x"00";	-- RET
